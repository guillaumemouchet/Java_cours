
package ch.hearc.b_poo.j_thread.c_vecteurs;

import org.junit.jupiter.api.Assertions;

import ch.hearc.b_poo.j_thread.c_vecteurs.tools.TypeExecution;

public class AddVector implements Runnable
	{

	/*------------------------------------------------------------------*\
	|*							Constructeurs							*|
	\*------------------------------------------------------------------*/

	public AddVector(double[] tabV1, double[] tabV2, TypeExecution typeExecution)
		{
		Assertions.assertEquals(tabV1.length, tabV2.length);

		// Input
			{
			this.tabV1 = tabV1;
			this.tabV2 = tabV2;
			this.typeExecution = typeExecution;
			}

		// Tools
			{
			this.n = this.tabV1.length;
			this.middle = n / 2;
			}

		// Output
			{
			this.tabW = new double[n];
			}
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	@Override
	public void run()
		{
		switch(this.typeExecution)
			{
			case RUNNABLE:
				break;
			case SEQUENTIEL:
				break;
			case THREAD:
				break;
			default:
				break;

			}

		}

	/*------------------------------*\
	|*				Get				*|
	\*------------------------------*/

	public double[] getTabW()
		{
		return this.tabW;
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	/*------------------------------------------------------------------*\
	|*							Attributs Private						*|
	\*------------------------------------------------------------------*/

	// Input
	private double[] tabV1;
	private double[] tabV2;
	private TypeExecution typeExecution;

	// Output
	private double[] tabW;

	// Tools
	private int n;
	private int middle;
	}
